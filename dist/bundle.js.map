{"version":3,"file":"bundle.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY,iDAAiD;AAC7D,SAAS,4DAA4D;AACrE,SAAS,yDAAyD;AAClE,SAAS,qDAAqD;AAC9D,SAAS,qDAAqD;AAC9D,SAAS,yDAAyD;AAClE,SAAS,6DAA6D;AACtE,SAAS,iEAAiE;AAC1E,SAAS,mDAAmD;AAC5D,SAAS,6DAA6D;AACtE,SAAS,mDAAmD;AAC5D,SAAS,uDAAuD;AAChE,SAAS,uDAAuD;AAChE;AACA,SAAS,+CAA+C;AACxD,SAAS,6CAA6C;AACtD,SAAS,8CAA8C;AACvD,SAAS,8CAA8C;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mBAAmB;AACjD;AACA;AACA,gCAAgC,oCAAoC;AACpE;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B,iBAAiB,YAAY;AAC7B;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B,iBAAiB,YAAY;AAC7B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC,E;;;;;AC1SD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;AC/ED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB,mCAAmC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;ACxFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;ACnFD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,0BAA0B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;ACvKD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://bird-game/./js/game.js","webpack://bird-game/./js/entities/entities.js","webpack://bird-game/./js/entities/HUD.js","webpack://bird-game/./js/screens/title.js","webpack://bird-game/./js/screens/play.js","webpack://bird-game/./js/screens/gameover.js","webpack://bird-game/./js/screens/endgame.js"],"sourcesContent":["var game = {\r\n    data: {\r\n        score : 0,\r\n        top_score: 0,\r\n        total_score: 0,\r\n        steps: 0,\r\n        life: 5,\r\n        start: false,\r\n        newHiScore: false,\r\n        muted: true\r\n    },\r\n\r\n    resources: [\r\n        // images\r\n        // {name: \"bg\", type:\"image\", src: \"data/img/bg.png\"},\r\n        {name: \"bg\", type:\"image\", src: \"data/img/robi_tamim_bg.png\"},\r\n        {name: \"clumsy\", type:\"image\", src: \"data/img/clumsy.png\"},\r\n        {name: \"pipe\", type:\"image\", src: \"data/img/pipe.png\"},\r\n        {name: \"logo\", type:\"image\", src: \"data/img/logo.png\"},\r\n        {name: \"ground\", type:\"image\", src: \"data/img/ground.png\"},\r\n        {name: \"gameover\", type:\"image\", src: \"data/img/gameover.png\"},\r\n        {name: \"gameoverbg\", type:\"image\", src: \"data/img/gameoverbg.png\"},\r\n        {name: \"hit\", type:\"image\", src: \"data/img/hit.png\"},\r\n        {name: \"getready\", type:\"image\", src: \"data/img/getready.png\"},\r\n        {name: \"new\", type:\"image\", src: \"data/img/new.png\"},\r\n        {name: \"share\", type:\"image\", src: \"data/img/share.png\"},\r\n        {name: \"tweet\", type:\"image\", src: \"data/img/tweet.png\"},\r\n        // sounds\r\n        {name: \"theme\", type: \"audio\", src: \"data/bgm/\"},\r\n        {name: \"hit\", type: \"audio\", src: \"data/sfx/\"},\r\n        {name: \"lose\", type: \"audio\", src: \"data/sfx/\"},\r\n        {name: \"wing\", type: \"audio\", src: \"data/sfx/\"},\r\n\r\n    ],\r\n\r\n    \"onload\": function() {\r\n\r\n        const sendGetRequest = async () => {\r\n            try {\r\n                const response = await axios.get('http://127.0.0.1:8000/api/players/1');\r\n                // console.log(response.data);\r\n                game.data.life = response.data.life;\r\n                game.data.total_score = response.data.total_score;\r\n                game.data.top_score = response.data.top_score;\r\n                me.save.topSteps = response.data.top_score;\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        };\r\n        \r\n        sendGetRequest();\r\n\r\n        // axios.get('http://127.0.0.1:8000/api/players/1').then(function (response) {\r\n        //     game.data.life = response.data.life;\r\n        //     game.data.total_score = response.data.total_score;\r\n        //     game.data.top_score = response.data.top_score;\r\n        //     me.save.topSteps = response.data.top_score;\r\n        // });\r\n\r\n        // if(game.data.life <= 0){\r\n        //     game.data.start = false;\r\n        //     me.audio.play(\"lose\");\r\n        //     this.endAnimation();\r\n        //     return false;\r\n        // }\r\n\r\n        if (!me.video.init(900, 600, {\r\n        // if (!me.video.init(600, 900, {\r\n            wrapper: \"screen\",\r\n            scale : \"auto\",\r\n            scaleMethod: \"fit\"\r\n        })) {\r\n            alert(\"Your browser does not support HTML5 canvas.\");\r\n            return;\r\n        }\r\n        me.audio.init(\"mp3,ogg\");\r\n        me.loader.preload(game.resources, this.loaded.bind(this));\r\n    },\r\n\r\n    \"loaded\": function() {\r\n        me.state.set(me.state.MENU, new game.TitleScreen());\r\n        me.state.set(me.state.PLAY, new game.PlayScreen());\r\n        me.state.set(me.state.GAME_END, new game.GameEnd());\r\n        me.state.set(me.state.GAME_OVER, new game.GameOverScreen());\r\n\r\n        me.input.bindKey(me.input.KEY.SPACE, \"fly\", true);\r\n        me.input.bindKey(me.input.KEY.M, \"mute\", true);\r\n        me.input.bindPointer(me.input.KEY.SPACE);\r\n\r\n        me.pool.register(\"clumsy\", game.BirdEntity);\r\n        me.pool.register(\"pipe\", game.PipeEntity, true);\r\n        me.pool.register(\"hit\", game.HitEntity, true);\r\n        me.pool.register(\"ground\", game.Ground, true);\r\n\r\n        me.state.change(me.state.MENU);\r\n    }\r\n};","game.BirdEntity = me.Entity.extend({\r\n    init: function(x, y) {\r\n        var settings = {};\r\n        settings.image = 'clumsy';\r\n        settings.width = 85;\r\n        settings.height = 60;\r\n\r\n        this._super(me.Entity, 'init', [x, y, settings]);\r\n        this.alwaysUpdate = true;\r\n        this.body.gravity = 0.2;\r\n        this.maxAngleRotation = Number.prototype.degToRad(-30);\r\n        this.maxAngleRotationDown = Number.prototype.degToRad(35);\r\n        this.renderable.addAnimation(\"flying\", [0, 1, 2]);\r\n        this.renderable.addAnimation(\"idle\", [0]);\r\n        this.renderable.setCurrentAnimation(\"flying\");\r\n        //this.renderable.anchorPoint = new me.Vector2d(0.1, 0.5);\r\n        this.body.removeShapeAt(0);\r\n        this.body.addShape(new me.Ellipse(5, 5, 71, 51));\r\n\r\n        // a tween object for the flying physic effect\r\n        this.flyTween = new me.Tween(this.pos);\r\n        this.flyTween.easing(me.Tween.Easing.Exponential.InOut);\r\n\r\n        this.currentAngle = 0;\r\n        this.angleTween = new me.Tween(this);\r\n        this.angleTween.easing(me.Tween.Easing.Exponential.InOut);\r\n\r\n        // end animation tween\r\n        this.endTween = null;\r\n\r\n        // collision shape\r\n        this.collided = false;\r\n\r\n        this.gravityForce = 0.2;\r\n    },\r\n\r\n    update: function(dt) {\r\n        var that = this;\r\n        this.pos.x = 60;\r\n        if (!game.data.start) {\r\n            return this._super(me.Entity, 'update', [dt]);\r\n        }\r\n        this.renderable.currentTransform.identity();\r\n        if (me.input.isKeyPressed('fly')) {\r\n            me.audio.play('wing');\r\n            this.gravityForce = 0.2;\r\n            var currentPos = this.pos.y;\r\n\r\n            this.angleTween.stop();\r\n            this.flyTween.stop();\r\n\r\n            this.flyTween.to({y: currentPos - 72}, 50);\r\n            this.flyTween.start();\r\n\r\n            this.angleTween.to({currentAngle: that.maxAngleRotation}, 50).onComplete(function(angle) {\r\n                that.renderable.currentTransform.rotate(that.maxAngleRotation);\r\n            })\r\n            this.angleTween.start();\r\n\r\n        } else {\r\n            this.gravityForce += 0.2;\r\n            this.pos.y += me.timer.tick * this.gravityForce;\r\n            this.currentAngle += Number.prototype.degToRad(3);\r\n            if (this.currentAngle >= this.maxAngleRotationDown) {\r\n                this.renderable.currentTransform.identity();\r\n                this.currentAngle = this.maxAngleRotationDown;\r\n            }\r\n        }\r\n        this.renderable.currentTransform.rotate(this.currentAngle);\r\n        me.Rect.prototype.updateBounds.apply(this);\r\n\r\n        if(game.data.life <= 0){\r\n            // console.log('end game')\r\n            game.data.start = false;\r\n            me.audio.play(\"lose\");\r\n            this.endAnimation();\r\n            return false;\r\n        }\r\n\r\n        var hitSky = -80; // bird height + 20px\r\n        \r\n        if (this.pos.y <= hitSky || this.collided) {\r\n\r\n            const sendPatchRequest = async () => {\r\n                try {\r\n                    const response = await axios.patch('http://127.0.0.1:8000/api/players/1', \r\n                    {\r\n                        score: game.data.steps,\r\n                        life: game.data.life,\r\n                        top_score: me.save.topSteps,\r\n                        // top_score: game.data.top_score\r\n                    });\r\n                    // console.log(response.data);\r\n\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            };\r\n            \r\n            sendPatchRequest();\r\n\r\n            // axios.patch('http://127.0.0.1:8000/api/players/1', \r\n            // {\r\n            //     score: game.data.steps,\r\n            //     life: game.data.life,\r\n            //     top_score: me.save.topSteps,\r\n            //     // top_score: game.data.top_score\r\n            // }\r\n            // ).then(function (response) {\r\n            //     console.log(response.data);\r\n            // });\r\n\r\n            game.data.start = false;\r\n            me.audio.play(\"lose\");\r\n            this.endAnimation();\r\n            return false;\r\n        }\r\n        \r\n        me.collision.check(this);\r\n        return true;\r\n    },\r\n\r\n    onCollision: function(response) {\r\n        var obj = response.b;\r\n        \r\n        if (obj.type === 'pipe' || obj.type === 'ground') {\r\n            me.device.vibrate(500);\r\n            this.collided = true;\r\n            game.data.life--;\r\n        }\r\n        // remove the hit box\r\n        if (obj.type === 'hit') {\r\n            me.game.world.removeChildNow(obj);\r\n            game.data.steps++;\r\n            game.data.score++;\r\n            me.audio.play('hit');\r\n        }\r\n    },\r\n\r\n    endAnimation: function() {\r\n        me.game.viewport.fadeOut(\"#fff\", 100);\r\n        var currentPos = this.pos.y;\r\n        this.endTween = new me.Tween(this.pos);\r\n        this.endTween.easing(me.Tween.Easing.Exponential.InOut);\r\n\r\n        this.flyTween.stop();\r\n        this.renderable.currentTransform.identity();\r\n        this.renderable.currentTransform.rotate(Number.prototype.degToRad(90));\r\n        var finalPos = me.game.viewport.height - this.renderable.width/2 - 96;\r\n        this.endTween\r\n            .to({y: currentPos}, 1000)\r\n            .to({y: finalPos}, 1000)\r\n            .onComplete(function() {\r\n                me.state.change(me.state.GAME_OVER);\r\n            });\r\n        this.endTween.start();\r\n    },\r\n\r\n    endGame: function() {\r\n        me.game.viewport.fadeOut(\"#fff\", 100);\r\n        var currentPos = this.pos.y;\r\n        this.endTween = new me.Tween(this.pos);\r\n        this.endTween.easing(me.Tween.Easing.Exponential.InOut);\r\n\r\n        this.flyTween.stop();\r\n        this.renderable.currentTransform.identity();\r\n        this.renderable.currentTransform.rotate(Number.prototype.degToRad(90));\r\n        var finalPos = me.game.viewport.height - this.renderable.width/2 - 96;\r\n        this.endTween\r\n            .to({y: currentPos}, 1000)\r\n            .to({y: finalPos}, 1000)\r\n            .onComplete(function() {\r\n                me.state.change(me.state.GAME_END);\r\n            });\r\n        this.endTween.start();\r\n    }\r\n\r\n});\r\n\r\ngame.PipeEntity = me.Entity.extend({\r\n    init: function(x, y) {\r\n        var settings = {};\r\n        settings.image = this.image = me.loader.getImage('pipe');\r\n        settings.width = 148;\r\n        settings.height= 1664;\r\n        settings.framewidth = 148;\r\n        settings.frameheight = 1664;\r\n\r\n        this._super(me.Entity, 'init', [x, y, settings]);\r\n        this.alwaysUpdate = true;\r\n        this.body.gravity = 0;\r\n        this.body.vel.set(-5, 0);\r\n        this.type = 'pipe';\r\n    },\r\n\r\n    update: function(dt) {\r\n        // mechanics\r\n        if (!game.data.start) {\r\n            return this._super(me.Entity, 'update', [dt]);\r\n        }\r\n        this.pos.add(this.body.vel);\r\n        if (this.pos.x < -this.image.width) {\r\n            me.game.world.removeChild(this);\r\n        }\r\n        me.Rect.prototype.updateBounds.apply(this);\r\n        this._super(me.Entity, 'update', [dt]);\r\n        return true;\r\n    },\r\n\r\n});\r\n\r\ngame.PipeGenerator = me.Renderable.extend({\r\n    init: function() {\r\n        this._super(me.Renderable, 'init', [0, me.game.viewport.width, me.game.viewport.height, 92]);\r\n        this.alwaysUpdate = true;\r\n        this.generate = 0;\r\n        this.pipeFrequency = 92;\r\n        this.pipeHoleSize = 1240;\r\n        this.posX = me.game.viewport.width;\r\n    },\r\n\r\n    update: function(dt) {\r\n        if (this.generate++ % this.pipeFrequency == 0) {\r\n            var posY = Number.prototype.random(\r\n                    me.video.renderer.getHeight() - 100,\r\n                    200\r\n            );\r\n            var posY2 = posY - me.game.viewport.height - this.pipeHoleSize;\r\n            var pipe1 = new me.pool.pull('pipe', this.posX, posY);\r\n            var pipe2 = new me.pool.pull('pipe', this.posX, posY2);\r\n            var hitPos = posY - 100;\r\n            var hit = new me.pool.pull(\"hit\", this.posX, hitPos);\r\n            pipe1.renderable.currentTransform.scaleY(-1);\r\n            me.game.world.addChild(pipe1, 10);\r\n            me.game.world.addChild(pipe2, 10);\r\n            me.game.world.addChild(hit, 11);\r\n        }\r\n        this._super(me.Entity, \"update\", [dt]);\r\n    },\r\n\r\n});\r\n\r\ngame.HitEntity = me.Entity.extend({\r\n    init: function(x, y) {\r\n        var settings = {};\r\n        settings.image = this.image = me.loader.getImage('hit');\r\n        settings.width = 148;\r\n        settings.height= 60;\r\n        settings.framewidth = 148;\r\n        settings.frameheight = 60;\r\n\r\n        this._super(me.Entity, 'init', [x, y, settings]);\r\n        this.alwaysUpdate = true;\r\n        this.body.gravity = 0;\r\n        this.updateTime = false;\r\n        this.renderable.alpha = 0;\r\n        this.body.accel.set(-5, 0);\r\n        this.body.removeShapeAt(0);\r\n        this.body.addShape(new me.Rect(0, 0, settings.width - 30, settings.height - 30));\r\n        this.type = 'hit';\r\n    },\r\n\r\n    update: function(dt) {\r\n        // mechanics\r\n        this.pos.add(this.body.accel);\r\n        if (this.pos.x < -this.image.width) {\r\n            me.game.world.removeChild(this);\r\n        }\r\n        me.Rect.prototype.updateBounds.apply(this);\r\n        this._super(me.Entity, \"update\", [dt]);\r\n        return true;\r\n    },\r\n\r\n});\r\n\r\ngame.Ground = me.Entity.extend({\r\n    init: function(x, y) {\r\n        var settings = {};\r\n        settings.image = me.loader.getImage('ground');\r\n        settings.width = 900;\r\n        settings.height= 96;\r\n        this._super(me.Entity, 'init', [x, y, settings]);\r\n        this.alwaysUpdate = true;\r\n        this.body.gravity = 0;\r\n        this.body.vel.set(-4, 0);\r\n        this.type = 'ground';\r\n    },\r\n\r\n    update: function(dt) {\r\n        // mechanics\r\n        this.pos.add(this.body.vel);\r\n        if (this.pos.x < -this.renderable.width) {\r\n            this.pos.x = me.video.renderer.getWidth() - 10;\r\n        }\r\n        me.Rect.prototype.updateBounds.apply(this);\r\n        return this._super(me.Entity, 'update', [dt]);\r\n    },\r\n\r\n});","game.HUD = game.HUD || {};\r\n\r\ngame.HUD.Container = me.Container.extend({\r\n    init: function() {\r\n        this._super(me.Container, 'init');\r\n        // persistent across level change\r\n        this.isPersistent = true;\r\n\r\n        // non collidable\r\n        this.collidable = false;\r\n\r\n        // make sure our object is always draw first\r\n        this.z = Infinity;\r\n\r\n        // give a name\r\n        this.name = \"HUD\";\r\n\r\n        // add our child score object at the top left corner\r\n        this.addChild(new game.HUD.ScoreItem(5, 5));\r\n    }\r\n});\r\n\r\ngame.HUD.ScoreItem = me.Renderable.extend({\r\n    init: function(x, y) {\r\n        this._super(me.Renderable, \"init\", [x, y, 10, 10]);\r\n\r\n        // local copy of the global score\r\n        // this.stepsFont = new me.Font('gamefont', 80, '#000', 'center');\r\n\r\n        this.font = new me.Font('gamefont', 40, 'red', 'left');\r\n        this.steps = 'Steps: ' + game.data.steps.toString();\r\n        this.score = 'Score: ' + game.data.score.toString();\r\n        this.life= 'Life: ' + game.data.life.toString();\r\n\r\n        // make sure we use screen coordinates\r\n        this.floating = true;\r\n    },\r\n\r\n    draw: function (renderer) {\r\n        if (game.data.start && me.state.isCurrent(me.state.PLAY)) {\r\n            \r\n            // TODO: data to be fetched from backend\r\n\r\n            this.font.draw(renderer, 'Life: ' + game.data.life.toString(), me.game.viewport.width/2 - 200, 10);\r\n            this.font.draw(renderer, 'Score: ' + game.data.steps.toString(), me.game.viewport.width/2 + 50, 10);\r\n            // this.font.draw(renderer, 'Score: ' + game.data.score.toString(), me.game.viewport.width/2 + 50, 10);\r\n        }\r\n\r\n        // if (game.data.start && me.state.isCurrent(me.state.PLAY))\r\n        //     this.stepsFont.draw(renderer, game.data.steps, me.game.viewport.width/2, 10);\r\n\r\n    }\r\n\r\n});\r\n\r\nvar BackgroundLayer = me.ImageLayer.extend({\r\n    init: function(image, z, speed) {\r\n        var settings = {};\r\n        settings.name = image;\r\n        settings.width = 900;\r\n        settings.height = 600;\r\n        settings.image = image;\r\n        settings.z = z;\r\n        settings.ratio = 1;\r\n        // call parent constructor\r\n        this._super(me.ImageLayer, 'init', [0, 0, settings]);\r\n    },\r\n\r\n    update: function() {\r\n        if (me.input.isKeyPressed('mute')) {\r\n            game.data.muted = !game.data.muted;\r\n            if (game.data.muted){\r\n                me.audio.disable();\r\n            }else{\r\n                me.audio.enable();\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n});","game.TitleScreen = me.ScreenObject.extend({\r\n    init: function(){\r\n        this._super(me.ScreenObject, 'init');\r\n        this.font = null;\r\n        this.ground1 = null;\r\n        this.ground2 = null;\r\n        this.logo = null;\r\n    },\r\n\r\n    onResetEvent: function() {\r\n        me.audio.stop(\"theme\");\r\n        game.data.newHiScore = false;\r\n\r\n        me.game.world.addChild(new BackgroundLayer('bg', 1));\r\n        me.input.bindKey(me.input.KEY.ENTER, \"enter\", true);\r\n        me.input.bindKey(me.input.KEY.SPACE, \"enter\", true);\r\n        me.input.bindPointer(me.input.pointer.LEFT, me.input.KEY.ENTER);\r\n\r\n        const sendGetRequest = async () => {\r\n            try {\r\n                const response = await axios.get('http://127.0.0.1:8000/api/players/1');\r\n                game.data.life = response.data.life;\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        };\r\n        \r\n        sendGetRequest();\r\n\r\n        this.handler = me.event.subscribe(me.event.KEYDOWN, function (action, keyCode, edge) {\r\n            if (action === \"enter\") {\r\n                if(game.data.life <= 0) {\r\n                    me.state.change(me.state.GAME_END);\r\n                }\r\n                else {\r\n                    me.state.change(me.state.PLAY);\r\n                }\r\n            }\r\n        });\r\n\r\n        //logo\r\n        this.logo = new me.Sprite(\r\n            me.game.viewport.width/2,\r\n            me.game.viewport.height/2 - 20,\r\n            {image: 'logo'}\r\n        );\r\n        me.game.world.addChild(this.logo, 10);\r\n\r\n        var that = this;\r\n        var logoTween = me.pool.pull(\"me.Tween\", this.logo.pos)\r\n            .to({y: me.game.viewport.height/2 - 100}, 1000)\r\n            .easing(me.Tween.Easing.Exponential.InOut).start();\r\n\r\n        this.ground1 = me.pool.pull(\"ground\", 0, me.video.renderer.getHeight() - 96);\r\n        this.ground2 = me.pool.pull(\"ground\", me.video.renderer.getWidth(),\r\n                                    me.video.renderer.getHeight() - 96);\r\n        me.game.world.addChild(this.ground1, 11);\r\n        me.game.world.addChild(this.ground2, 11);\r\n\r\n        me.game.world.addChild(new (me.Renderable.extend ({\r\n            // constructor\r\n            init: function() {\r\n                // size does not matter, it's just to avoid having a zero size\r\n                // renderable\r\n                this._super(me.Renderable, 'init', [0, 0, 100, 100]);\r\n                this.text = me.device.touch ? '\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tRed.Digital Limited\\nTap to start' : 'PRESS SPACE OR CLICK LEFT MOUSE BUTTON OR TOUCHPAD TO START \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPRESS \"M\" TO MUTE SOUND';\r\n                this.font = new me.Font('gamefont', 20, '#000');\r\n            },\r\n            draw: function (renderer) {\r\n                var measure = this.font.measureText(renderer, this.text);\r\n                var xpos = me.game.viewport.width/2 - measure.width/2;\r\n                var ypos = me.game.viewport.height/2 + 50;\r\n                this.font.draw(renderer, this.text, xpos, ypos);\r\n            }\r\n        })), 12);\r\n    },\r\n\r\n    onDestroyEvent: function() {\r\n        // unregister the event\r\n        me.event.unsubscribe(this.handler);\r\n        me.input.unbindKey(me.input.KEY.ENTER);\r\n        me.input.unbindKey(me.input.KEY.SPACE);\r\n        me.input.unbindPointer(me.input.pointer.LEFT);\r\n        this.ground1 = null;\r\n        this.ground2 = null;\r\n        me.game.world.removeChild(this.logo);\r\n        this.logo = null;\r\n    }\r\n});","game.PlayScreen = me.ScreenObject.extend({\r\n    init: function() {\r\n        me.audio.play(\"theme\", true);\r\n        // lower audio volume on firefox browser\r\n        var vol = me.device.ua.indexOf(\"Firefox\") !== -1 ? 0.3 : 0.5;\r\n        me.audio.setVolume(vol);\r\n        this._super(me.ScreenObject, 'init');\r\n    },\r\n\r\n    onResetEvent: function() {\r\n        me.game.reset();\r\n        me.audio.stop(\"theme\");\r\n        if (!game.data.muted){\r\n            me.audio.play(\"theme\", true);\r\n        }\r\n\r\n        me.input.bindKey(me.input.KEY.SPACE, \"fly\", true);\r\n        \r\n        // axios.get('http://127.0.0.1:8000/api/players/1').then(function (response) {\r\n        //     game.data.life = response.data.life;\r\n        // });\r\n\r\n        const sendGetRequest = async () => {\r\n            try {\r\n                const response = await axios.get('http://127.0.0.1:8000/api/players/1');\r\n                // console.log(response.data);\r\n                game.data.life = response.data.life;\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        };\r\n        \r\n        sendGetRequest();\r\n\r\n        game.data.score = 0;\r\n        game.data.steps = 0;\r\n        game.data.start = false;\r\n        game.data.newHiscore = false;\r\n\r\n        me.game.world.addChild(new BackgroundLayer('bg', 1));\r\n\r\n        this.ground1 = me.pool.pull('ground', 0, me.game.viewport.height - 96);\r\n        this.ground2 = me.pool.pull('ground', me.game.viewport.width,\r\n            me.game.viewport.height - 96);\r\n        me.game.world.addChild(this.ground1, 11);\r\n        me.game.world.addChild(this.ground2, 11);\r\n\r\n        this.HUD = new game.HUD.Container();\r\n        me.game.world.addChild(this.HUD, 11);\r\n\r\n        this.bird = me.pool.pull(\"clumsy\", 60, me.game.viewport.height/2 - 100);\r\n        me.game.world.addChild(this.bird, 10);\r\n\r\n        //inputs\r\n        me.input.bindPointer(me.input.pointer.LEFT, me.input.KEY.SPACE);\r\n\r\n        this.getReady = new me.Sprite(\r\n            me.game.viewport.width/2,\r\n            me.game.viewport.height/2,\r\n            {image: 'getready'}\r\n        );\r\n        me.game.world.addChild(this.getReady, 11);\r\n\r\n        var that = this;\r\n        var fadeOut = new me.Tween(this.getReady).to({alpha: 0}, 2000)\r\n            .easing(me.Tween.Easing.Linear.None)\r\n            .onComplete(function() {\r\n                game.data.start = true;\r\n                me.game.world.addChild(new game.PipeGenerator(), 0);\r\n                me.game.world.removeChild(that.getReady);\r\n            }).start();\r\n    },\r\n\r\n    onDestroyEvent: function() {\r\n        me.audio.stopTrack('theme');\r\n        // free the stored instance\r\n        this.HUD = null;\r\n        this.bird = null;\r\n        this.ground1 = null;\r\n        this.ground2 = null;\r\n        me.input.unbindKey(me.input.KEY.SPACE);\r\n        me.input.unbindPointer(me.input.pointer.LEFT);\r\n    }\r\n});","game.GameOverScreen = me.ScreenObject.extend({\r\n    init: function() {\r\n        this.savedData = null;\r\n        this.handler = null;\r\n    },\r\n\r\n    onResetEvent: function() {\r\n        //save section\r\n        this.savedData = {\r\n            score: game.data.score,\r\n            steps: game.data.steps,\r\n            life: game.data.life\r\n            // topSteps: game.data.topSteps\r\n        };\r\n        me.save.add(this.savedData);\r\n\r\n        // if (!me.save.topSteps) me.save.add({topSteps: game.data.steps});\r\n        if (game.data.steps > me.save.topSteps) {\r\n            me.save.topSteps = game.data.steps;\r\n            game.data.newHiScore = true;\r\n        }\r\n\r\n        // axios.patch('http://127.0.0.1:8000/api/players/1', \r\n        // {\r\n        //     top_score: me.save.topSteps,\r\n        //     life: game.data.life\r\n        // }\r\n        // ).then(function (response) {\r\n        //     console.log(response.data);\r\n        // });\r\n\r\n        const sendPatchRequest = async () => {\r\n            try {\r\n                const response = await axios.patch('http://127.0.0.1:8000/api/players/1', \r\n                {\r\n                    top_score: me.save.topSteps,\r\n                    life: game.data.life\r\n                });\r\n                // console.log(response.data);\r\n\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        };\r\n        \r\n        sendPatchRequest();\r\n\r\n        me.input.bindKey(me.input.KEY.ENTER, \"enter\", true);\r\n        me.input.bindKey(me.input.KEY.SPACE, \"enter\", false)\r\n        me.input.bindPointer(me.input.pointer.LEFT, me.input.KEY.ENTER);\r\n\r\n        this.handler = me.event.subscribe(me.event.KEYDOWN,\r\n            function (action, keyCode, edge) {\r\n                if (action === \"enter\") {\r\n                    me.state.change(me.state.MENU);\r\n                }\r\n            });\r\n\r\n        me.game.world.addChild(new me.Sprite(\r\n            me.game.viewport.width/2,\r\n            me.game.viewport.height/2 - 100,\r\n            {image: 'gameover'}\r\n        ), 12);\r\n\r\n        var gameOverBG = new me.Sprite(\r\n            me.game.viewport.width/2,\r\n            me.game.viewport.height/2,\r\n            {image: 'gameoverbg'}\r\n        );\r\n        me.game.world.addChild(gameOverBG, 10);\r\n\r\n        me.game.world.addChild(new BackgroundLayer('bg', 1));\r\n\r\n        // ground\r\n        this.ground1 = me.pool.pull('ground', 0, me.game.viewport.height - 96);\r\n        this.ground2 = me.pool.pull('ground', me.game.viewport.width,\r\n            me.video.renderer.getHeight() - 96);\r\n        me.game.world.addChild(this.ground1, 11);\r\n        me.game.world.addChild(this.ground2, 11);\r\n\r\n        // add the dialog with the game information\r\n        if (game.data.newHiScore) {\r\n            var newRect = new me.Sprite(\r\n                gameOverBG.width/2,\r\n                gameOverBG.height/2,\r\n                {image: 'new'}\r\n            );\r\n            me.game.world.addChild(newRect, 12);\r\n        }\r\n\r\n        this.dialog = new (me.Renderable.extend({\r\n            // constructor\r\n            init: function() {\r\n                this._super(me.Renderable, 'init',\r\n                    [0, 0, me.game.viewport.width/2, me.game.viewport.height/2]\r\n                );\r\n                this.font = new me.Font('gamefont', 40, 'black', 'left');\r\n                \r\n                // axios.get('http://127.0.0.1:8000/api/players/1').then(function (response) {\r\n                //     game.data.score = response.data.score;\r\n                //     // me.save.topSteps = response.data.top_score;\r\n                //     game.data.life = response.data.life;\r\n                // });\r\n\r\n                const sendGetRequest = async () => {\r\n                    try {\r\n                        const response = await axios.get('http://127.0.0.1:8000/api/players/1');\r\n                        // console.log(response.data);\r\n                        game.data.score = response.data.score;\r\n                        game.data.life = response.data.life;\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                    }\r\n                };\r\n                \r\n                sendGetRequest();\r\n\r\n                this.steps = 'Score: ' + game.data.steps.toString();\r\n                this.topSteps= 'Highest Score: ' + me.save.topSteps.toString();\r\n                this.life= 'Life: ' + game.data.life.toString();\r\n            },\r\n\r\n            draw: function (renderer) {\r\n                var stepsText = this.font.measureText(renderer, this.steps);\r\n                var topStepsText = this.font.measureText(renderer, this.topSteps);\r\n                var scoreText = this.font.measureText(renderer, this.score);\r\n                var lifeText = this.font.measureText(renderer, this.life);\r\n\r\n                //steps\r\n                this.font.draw(\r\n                    renderer,\r\n                    this.steps,\r\n                    me.game.viewport.width/2 - stepsText.width/2 - 60,\r\n                    me.game.viewport.height/2\r\n                );\r\n\r\n                //top score\r\n                this.font.draw(\r\n                    renderer,\r\n                    this.topSteps,\r\n                    me.game.viewport.width/2 - stepsText.width/2 - 60,\r\n                    me.game.viewport.height/2 + 50\r\n                );\r\n                \r\n                //Remaining lives\r\n                this.font.draw(\r\n                    renderer,\r\n                    this.life,\r\n                    me.game.viewport.width/2 - stepsText.width/2 - 60,\r\n                    me.game.viewport.height/2 + 100\r\n                );\r\n            }\r\n        }));\r\n        me.game.world.addChild(this.dialog, 12);\r\n    },\r\n\r\n    onDestroyEvent: function() {\r\n        // unregister the event\r\n        me.event.unsubscribe(this.handler);\r\n        me.input.unbindKey(me.input.KEY.ENTER);\r\n        me.input.unbindKey(me.input.KEY.SPACE);\r\n        me.input.unbindPointer(me.input.pointer.LEFT);\r\n        this.ground1 = null;\r\n        this.ground2 = null;\r\n        this.font = null;\r\n        me.audio.stop(\"theme\");\r\n    }\r\n});","game.GameEnd = me.ScreenObject.extend({\r\n    init: function() {\r\n        this.savedData = null;\r\n        this.handler = null;\r\n    },\r\n\r\n    onResetEvent: function() {\r\n        //save section\r\n        this.savedData = {\r\n            score: game.data.score,\r\n            steps: game.data.steps,\r\n            life: game.data.life\r\n            // topSteps: game.data.topSteps\r\n        };\r\n        me.save.add(this.savedData);\r\n\r\n        me.input.bindKey(me.input.KEY.ENTER, \"enter\", true);\r\n        me.input.bindKey(me.input.KEY.SPACE, \"enter\", false)\r\n        me.input.bindPointer(me.input.pointer.LEFT, me.input.KEY.ENTER);\r\n\r\n        this.handler = me.event.subscribe(me.event.KEYDOWN,\r\n            function (action, keyCode, edge) {\r\n                if (action === \"enter\") {\r\n                    me.state.change(me.state.MENU);\r\n                }\r\n            });\r\n\r\n        me.game.world.addChild(new me.Sprite(\r\n            me.game.viewport.width/2,\r\n            me.game.viewport.height/2 - 100,\r\n            {image: 'gameover'}\r\n        ), 12);\r\n\r\n        var gameOverBG = new me.Sprite(\r\n            me.game.viewport.width/2,\r\n            me.game.viewport.height/2,\r\n            {image: 'gameoverbg'}\r\n        );\r\n        me.game.world.addChild(gameOverBG, 10);\r\n\r\n        me.game.world.addChild(new BackgroundLayer('bg', 1));\r\n\r\n        // ground\r\n        this.ground1 = me.pool.pull('ground', 0, me.game.viewport.height - 96);\r\n        this.ground2 = me.pool.pull('ground', me.game.viewport.width,\r\n            me.video.renderer.getHeight() - 96);\r\n        me.game.world.addChild(this.ground1, 11);\r\n        me.game.world.addChild(this.ground2, 11);\r\n\r\n        // add the dialog with the game information\r\n        if (game.data.newHiScore) {\r\n            var newRect = new me.Sprite(\r\n                gameOverBG.width/2,\r\n                gameOverBG.height/2,\r\n                {image: 'new'}\r\n            );\r\n            me.game.world.addChild(newRect, 12);\r\n        }\r\n\r\n        this.dialog = new (me.Renderable.extend({\r\n            // constructor\r\n            init: function() {\r\n                this._super(me.Renderable, 'init',\r\n                    [0, 0, me.game.viewport.width/2, me.game.viewport.height/2]\r\n                );\r\n                this.font = new me.Font('gamefont', 40, 'black', 'left');\r\n                \r\n                // axios.get('http://127.0.0.1:8000/api/players/1').then(function (response) {\r\n                //     game.data.score = response.data.score;\r\n                //     // me.save.topSteps = response.data.top_score;\r\n                //     game.data.life = response.data.life;\r\n                // });\r\n\r\n                const sendGetRequest = async () => {\r\n                    try {\r\n                        const response = await axios.get('http://127.0.0.1:8000/api/players/1');\r\n                        // console.log(response.data);\r\n                        game.data.score = response.data.score;\r\n                        game.data.life = response.data.life;\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                    }\r\n                };\r\n                \r\n                sendGetRequest();\r\n\r\n                this.steps = 'Score: ' + game.data.steps.toString();\r\n                this.topSteps= 'Highest Score: ' + me.save.topSteps.toString();\r\n                this.life= 'You have no lives Left!';\r\n            },\r\n\r\n            draw: function (renderer) {\r\n                var stepsText = this.font.measureText(renderer, this.steps);\r\n                var topStepsText = this.font.measureText(renderer, this.topSteps);\r\n                var scoreText = this.font.measureText(renderer, this.score);\r\n                var lifeText = this.font.measureText(renderer, this.life);\r\n\r\n                //steps\r\n                this.font.draw(\r\n                    renderer,\r\n                    this.steps,\r\n                    me.game.viewport.width/2 - stepsText.width/2 - 140,\r\n                    me.game.viewport.height/2\r\n                );\r\n\r\n                //top score\r\n                this.font.draw(\r\n                    renderer,\r\n                    this.topSteps,\r\n                    me.game.viewport.width/2 - stepsText.width/2 - 140,\r\n                    me.game.viewport.height/2 + 50\r\n                );\r\n                \r\n                //Remaining lives\r\n                this.font.draw(\r\n                    renderer,\r\n                    this.life,\r\n                    me.game.viewport.width/2 - stepsText.width/2 - 140,\r\n                    me.game.viewport.height/2 + 100\r\n                );\r\n            }\r\n        }));\r\n        me.game.world.addChild(this.dialog, 12);\r\n    },\r\n\r\n    onDestroyEvent: function() {\r\n        // unregister the event\r\n        me.event.unsubscribe(this.handler);\r\n        me.input.unbindKey(me.input.KEY.ENTER);\r\n        me.input.unbindKey(me.input.KEY.SPACE);\r\n        me.input.unbindPointer(me.input.pointer.LEFT);\r\n        this.ground1 = null;\r\n        this.ground2 = null;\r\n        this.font = null;\r\n        me.audio.stop(\"theme\");\r\n    }\r\n});"],"names":[],"sourceRoot":""}